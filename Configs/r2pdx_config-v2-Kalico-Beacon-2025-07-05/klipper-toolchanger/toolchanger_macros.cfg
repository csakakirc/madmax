# https://github.com/viesturz/klipper-toolchanger/blob/main/macros.cfg

[gcode_macro DOCK_SEQUENCE]
gcode:
  {% for i in range(0, params.REPS|default(10)|int)  %}
    T0
    G4 P1000
    T1
    G4 P1000
  {% endfor %}

#####################################################################
#  _CHANGE_TOOL
#####################################################################

[gcode_macro _CHANGE_TOOL]
description: Changes tools, updates offsets and transfers fan control to the next tool head.
  If tool head LEDs are defined, will set READY, BUSY, or PRINTING.
  Usage: _CHANGE_TOOL T={tool_number}
gcode:
  {% set tool_number = params.T|int %}
  {% set svf = printer.save_variables.variables %}
  {% set modified_z = 0.0 %}
  {% set last_tool = printer.toolchanger.tool_number|int %}
  {% if last_tool|int >= 0 %}
    # Grab the current tool number so we can remove any z offset that is present
    {% set z_offset_val = svf[ 't' + printer.toolchanger.tool_number|string + '_offset_z'] %}
    # Subtract the tool z_offset from the homing_origin, the remainder is any tweaked z offset
    {% set modified_z = printer.gcode_move.homing_origin.z|float|round(3) - z_offset_val|float|round(3) %}
    # Grab the current print fan speed
    {% set active_fan = "fan_generic part_fan_t" + printer.toolchanger.tool_number|string %}
    {% set fan_speed = printer[active_fan].speed|float|round(2) %}
    # Shutdown the active part cooling fan
    SET_FAN_SPEED FAN="part_fan_t{printer.toolchanger.tool_number|string}" SPEED=0
    # Clear the offsets set by macros
    SET_GCODE_OFFSET X=0 Y=0 Z=0 MOVE=1
    # Update toolhead lights if applicable
    {% if printer["gcode_macro _sb_vars"] is defined %}
      STATUS_READY
    {% endif %}
  {% endif %}
  # Activate the selected tool
  SELECT_TOOL T={tool_number}
  # Apply the macro offsets, including modified z settings
  SET_GCODE_OFFSET X={svf[ 't' + tool_number|string + '_offset_x']|float|round(3)} Y={svf[ 't' + tool_number|string + '_offset_y']|float|round(3)} Z={svf[ 't' + tool_number|string + '_offset_z']|float + modified_z|float|round(3)} MOVE=1
  # Transfer the print fan speed to the active tool head
  {% if last_tool|int >= 0 %}
    SET_FAN_SPEED FAN="part_fan_t{tool_number}" SPEED={fan_speed}
  {% endif %}
  # Update toolhead lights if applicable
  {% if printer["gcode_macro _sb_vars"] is defined %}
    {% if printer.idle_timeout.state != "Printing" %}
      STATUS_BUSY
    {% else %}
      STATUS_PRINTING
    {% endif %}
  {% endif %}
  # Update the current tool variable in the save file
  SAVE_VARIABLE VARIABLE=current_tool VALUE={tool_number}

#####################################################################
#   _TAP_PROBE_ACTIVATE
#####################################################################

[gcode_macro _TAP_PROBE_ACTIVATE]
description: Ensure safe temp for bed probing
gcode:
    {% set max_temp = 170 %}
    {% set actual_temp = printer[params.HEATER].temperature %}
    {% set target_temp = printer[params.HEATER].target %}
    {% if target_temp > max_temp %}
        { action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (target_temp, max_temp)) }
        SET_HEATER_TEMPERATURE HEATER={params.HEATER} TARGET={ max_temp|int - 5 }
    {% endif %}
    # Temperature target is already low enough, but nozzle may still be too hot.
    {% if actual_temp > max_temp  + 2 %}
        { action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (actual_temp, max_temp)) }
        TEMPERATURE_WAIT SENSOR={params.HEATER} MAXIMUM={ max_temp }
    {% endif %}

#####################################################################
#   _WAIT_FOR_TEMP_WITHIN_TOLERANCE
#####################################################################

[gcode_macro _WAIT_FOR_TEMP_WITHIN_TOLERANCE]
description: Wait for temp to get within tolerance
gcode:
    {% set tolerance = params.TOLERANCE | float  %}
    {% set actual = printer[params.HEATER].temperature | float %}
    {% set target = printer[params.HEATER].target | float %}
    {% if target != 0 and ((actual < (target - tolerance)) or (actual > (target + tolerance))) %}
        { action_respond_info('Extruder temperature %.1fC is not within %.1fC of %.1fC target; waiting...' % (actual, tolerance, target)) }
        RESPOND TYPE=echo MSG='TEMPERATURE_WAIT SENSOR={params.HEATER} MINIMUM={target - tolerance} MAXIMUM={target + tolerance}'
        TEMPERATURE_WAIT SENSOR={params.HEATER} MINIMUM={target - tolerance} MAXIMUM={target + tolerance}
    {% endif %}

#####################################################################
#   M104
#####################################################################

[gcode_macro M104]
rename_existing: M104.1
description: [T<index>] [S<temperature>]
  Set tool temperature.
  T= Tool number, optional. If this parameter is not provided, the current tool is used.
  S= Target temperature
gcode:
    {% if params.T is defined %}
      {% set newparameters = "" %}
      {% set newparameters = newparameters ~ " T="~params.T %}
      {% if params.S is defined %}
        {% set newparameters = newparameters ~ " TARGET="~params.S %}
      {% endif %}
      SET_TOOL_TEMPERATURE{newparameters}
    {% else %}
      M104.1 {rawparams}
    {% endif %}

#####################################################################
#   M109
#####################################################################

[gcode_macro M109]
rename_existing: M109.1
description: [T<index>] [S<temperature>]
  Set tool temperature and wait.
  T= Tool number, optional. If this parameter is not provided, the current tool is used.
  S= Target temperature
gcode:
    {% if params.T is defined %}
      {% set newparameters = "" %}
      {% set newparameters = newparameters ~ " T="~params.T %}
      {% if params.S is defined %}
        {% set newparameters = newparameters ~ " TARGET="~params.S %}
      {% endif %}
      SET_TOOL_TEMPERATURE WAIT=1 {newparameters}
    {% else %}
      M109.1 {rawparams}
    {% endif %}

#####################################################################
#   M106
#####################################################################

[gcode_macro M106]
description: Override "M106" to account for multiple extruders.
gcode:
    {% set raw_speed = params.S|default(255)|float %}
    {% set fan_speed = (raw_speed / 255.0)|round(2) %}
    {% set fan_tool = 0 if (printer.toolchanger.tool_number|string) == "-1" else printer.toolchanger.tool_number|string %}
    {% if (params.P) is defined %}
      {% set P_fan = "part_fan_t" + params.P|string %}
      SET_FAN_SPEED FAN={P_fan} SPEED={fan_speed}
    {% else %}
      SET_FAN_SPEED FAN="part_fan_t{fan_tool}" SPEED={fan_speed}
    {% endif %}

#####################################################################
#   M107
#####################################################################

[gcode_macro M107]
description: Override "M107" to account for multiple extruders.
gcode:
    # If we specified a fan, turn it off
    {% if (params.P) is defined %}
      M106 S0 P{params.P}
    {% else %}
      # Otherwise, turn off all part cooling fans
      {% set num_tools = printer.toolchanger.tool_numbers|length|int %}
      # Loop through the tools.
      {% for i in range(num_tools) %}
        # Turn off the fans
        M106 S0 P{i}
      {% endfor %}
    {% endif %}